<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAMMOAADDDgAAAAEAAAAB
        AAAsF/IAIxXyACQb8AAfHvAAKBztACMc5AApG/EAHRrpACQg6wAcIu0AIxbsACUb3AAqIewAIyHlACMb
        6wAdFuoAKyDzACYg8gAXG+YAKh3lADIk2wArItwAKiLjACUh3QArHN0AOSnaADMsvAA6McEAOTHIAC0q
        0gAyK8MAMTC1ADUyugA2MMAAHRbmADMnywAQBYsAAABKAAAARAAAAFIADAqFADMq0wAkGqIAAAA6ABUQ
        jgAtJMsAJSKRAAAAMwAAACMAAAAaAAICfwAtKMsAMSXTACgekAAAABMAAAAMAAEBAQAsLbsAKyrdADIr
        ygAIAgAAOzO0ACwk0wAAACoALCvCADw5vgA7OLMABQJ0AA0FhwATDXsAEAhtACwixwA7MboAMSLhABwb
        5AAEBGgAFQ2PAB4YiQA5LtIAAABcABgUhQAVGZ0AHSDkAC0xtQASC4QAHBmHACEifAAVEnQAGxx2ADAp
        2AAoIH0ACQJxABgSlQAfGpUAEglxAAsHZwAaEYkADQhqADgvvwAVE20AOizMAP///wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgIAARMEDg4CBwICAQYODA4OAg4OCAcOCgUJUlIHBAAICgIGBAQODgICDgYGCgQFBAQBBgcR
        BwIEDgUHDgUGAFIODgQGBAQIBwgOBQ4TBAQEChMEBw4OAgYGBAQEBAYBSgkCCgYGCg4CCBY+IykjIxxk
        IzQVFgUOBAEEBAQKAgNKDQ4EBAwECgQTIz1jPz8wMDAvXz07FwUODg4EBA4OBw5KDgQKDgQWLWJFLzE2
        ODg4ODcxL1s7OgUHDggEDggNBAQKAwcHFi1XPzExNzg4ODg4ODg2MF9iFgYHDgQKDg0ABgIDBxYzYDA2
        ODg4ODg4ODg4ODg3MGE7FwgODg4ODgYGCg4WO1cwMTc4ODg8PDg4ODg4PDc2MEshDQ4OBQ4OBAYEFkdU
        MDY3Nzc2MTAwMDAwMTExNzw2P19AFQ0NDg4HCAU6PSY2ODg3MCZcHB4eHiFdJSswMTg2MF4eEwoKBlJK
        Fh5XMTc4NjBYIBcODA4ODFkePVowNzg3MFtZCgIHCQ0zVD83ODc/VR4XDgIKCgEEExgUHFYwNzg2LykG
        AwMSUh4nMDc2P1A7Fg4CAg4RBgEGAAQVUyYxNzc/IwYHAgQYTk8wMCtQKRgFDggOCAUHBwQEBgc6US8x
        MS9OCgcIBxYYNUsnTDsWBA0ODgoODg4OBAQHAwcdLiYmTTQEBQUCBxYVHT4VEwoEBAQCDg4NDg4EChED
        Bw0dMx0+FgQRBwoIEUoNFhVJFBUTCgoCDg4TDgQEBwcOBAIOBw4KBAoCCgYECzMaSD1CGilJBwIEDgQO
        DggCAkoHAg4CBAQHAgIAExMpKCYrKy8mRD4HDw4KCgQICzozOzs7M0cpCw0GBgQWKUQ/MTA2NjAmGhYB
        Dg4RDw0zRS8/PzA/L0YpEw4OEAseJTE4PDw4Ny89FQYRBwIHETMrNzc4ODg3PzkXDQQOFUEvMTg8PDgx
        L0IYBA4HAg4OOz84ODg4PDgxQx0TDQ4VOSUxODw4ODYvPT4EDg4ODg4zPzc4ODw4ODEmQA0MAg00Ki82
        Nzc4MSY5Og4RCg4IDjsmNjg8PDw4MSU5Fg4KBBMtLi8wMTEvMjMWDgoQEQcENDUvMTY2NjEvLB0WChEi
        BBUjJCUmJygpFgUEBAoBAhMWIyonKyYrJywZEwoCBw4FBBgZGhscHQsKAgQEBAoGBAQTGB4fICEeGQsA
        BgEHCAUMEwsUFQsWBQQEAggEBA4KDgQFFhUVFxUNDgoCBgQODgUMEAUEBAYRBAIKCgQOBAIEBwgSCBEH
        Dg4NDg4EAAYODg8CBQgGCgoHDg0OBAYGBw4MBQgCCgQEDA4NBwUAAQIDAwMEBQEGBwgHCQgEBgoCBAsM
        AgIBBgYKDQ0OCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>